name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          # body: TODO
          draft: false
          prerelease: false

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache go mod directories
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create build directory
        run: mkdir build

      - name: Build
        run: go build -o build/pyroscope ./cmd/pyroscope

      - name: List Assets
        run: ls build/

      - name: Determine file name
        id: file_name
        run: echo ::set-output name=file_name::pyroscope-linux-x86_64-${GITHUB_REF#refs/*/}.tar.gz

      - name: Make package build directory
        run: mkdir -p package-build/bin

      - name: Copy binary to package-build directory
        run: cp build/pyroscope package-build/bin/pyroscope

      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v2
        with:
          token: ${{secrets.github_token}}

      - name: Determine iteration
        id: iteration
        run: echo ::set-output name=iteration::${{ steps.buildnumber.outputs.build_number }}.$(date +%Y%m%d)git${GITHUB_SHA::8}

      - name: Determine rpm name
        id: rpm_name
        run: echo ::set-output name=rpm_name::pyroscope-${GITHUB_REF#refs/*/v}-${{ steps.iteration.outputs.iteration }}-x86_64.rpm

      - name: Determine deb name
        id: deb_name
        run: echo ::set-output name=deb_name::pyroscope_${GITHUB_REF#refs/*/v}_amd64.deb

      - name: Install fpm
        run: "sudo gem install fpm"

      - name: Create rpm package
        run: "fpm -s dir -t rpm -n pyroscope --iteration ${{ steps.iteration.outputs.iteration }} --architecture x86_64 -v ${GITHUB_REF#refs/*/v} --description 'pyroscope is continuous profiling software' -p ${{ steps.rpm_name.outputs.rpm_name }} ./package-build"

      - name: Create deb package
        run: "fpm -s dir -t deb -n pyroscope --iteration ${{ steps.iteration.outputs.iteration }} --architecture x86_64 -v ${GITHUB_REF#refs/*/v} --description 'pyroscope is continuous profiling software' -p ${{ steps.rpm_name.outputs.deb_name }} ./package-build"

      - name: Archive Assets
        run: tar czf ${{ steps.file_name.outputs.file_name }} build/*

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.file_name.outputs.file_name }}
          asset_name: ${{ steps.file_name.outputs.file_name }}
          asset_content_type: application/gzip
